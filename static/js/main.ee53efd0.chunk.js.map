{"version":3,"sources":["components/Display.js","components/DrumPad.js","components/App.js","serviceWorker.js","index.js"],"names":["Display","react_default","a","createElement","id","className","this","props","display","React","Component","DrumPad","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","audioKey","button","handleClick","bind","assertThisInitialized","playAudio","event","currentTarget","children","audio","key","setDisplay","play","keyPressed","refs","buttonRef","mp3_file","sound","onClick","ref","src","App","keys","sounds","description","handleKeyPress","text","setState","toUpperCase","includes","window","addEventListener","_this2","components_Display","map","components_DrumPad","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAYeA,0LARb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,UAAU,WACH,KAAvBC,KAAKC,MAAMC,SAAkBF,KAAKC,MAAMC,gBAJvBC,IAAMC,YCyCbC,cAxCd,SAAAA,EAAYJ,GAAO,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KACDW,MAAQ,CACZC,SAAUP,EAAKL,MAAMa,QAEtBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKY,UAAYZ,EAAKY,UAAUF,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANCA,2EAQPa,GACX,IAAML,EAASK,EAAMC,cACrBpB,KAAKkB,UAAUJ,EAAOO,SAAS,GAAIP,EAAOhB,sCAEjCwB,EAAOC,GACZA,GAAKvB,KAAKC,MAAMuB,WAAWD,GAC/BD,EAAMG,oDAIFzB,KAAKC,MAAMyB,aAAe1B,KAAKY,MAAMC,UACxCb,KAAKkB,UAAUlB,KAAK2B,KAAKC,UAAUP,SAAS,qCAM7C,IAAMQ,EAAW7B,KAAKC,MAAM6B,MAC5B,OACCnC,EAAAC,EAAAC,cAAA,UACCE,UAAU,WACVD,GAAIE,KAAKC,MAAMa,OACfiB,QAAS/B,KAAKe,YACdiB,IAAI,aAEHhC,KAAKC,MAAMa,OACZnB,EAAAC,EAAAC,cAAA,SAAOoC,IAAKJ,EAAU9B,UAAU,OAAOD,GAAIE,KAAKC,MAAMa,iBAnCpCX,IAAMC,WCyGb8B,2BAnGd,SAAAA,EAAYjC,GAAO,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAkC,IAClB5B,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAA2B,GAAAvB,KAAAX,KAAMC,KACDW,MAAQ,CACZuB,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/CC,OAAQ,CACP,CACCb,IAAK,IACLO,MAAO,2DACPO,YAAa,YAEd,CACCd,IAAK,IACLO,MAAO,2DACPO,YAAa,YAEd,CACCd,IAAK,IACLO,MAAO,2DACPO,YAAa,YAEd,CACCd,IAAK,IACLO,MAAO,yDACPO,YAAa,QAEd,CACCd,IAAK,IACLO,MAAO,6DACPO,YAAa,QAEd,CACCd,IAAK,IACLO,MACC,gEACDO,YAAa,eAEd,CACCd,IAAK,IACLO,MAAO,+DACPO,YAAa,cAEd,CACCd,IAAK,IACLO,MAAO,0DACPO,YAAa,SAEd,CACCd,IAAK,IACLO,MAAO,6DACPO,YAAa,eAGfX,WAAY,GACZxB,QAAS,IAEVI,EAAKkB,WAAalB,EAAKkB,WAAWR,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKgC,eAAiBhC,EAAKgC,eAAetB,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAxDJA,0EA2DRiC,GACVvC,KAAKwC,SAAS,CACbtC,QAASqC,2CAIIpB,GACd,IAAMI,EAAMJ,EAAMI,IAAIkB,cAClBzC,KAAKY,MAAMuB,KAAKO,SAASnB,GAAMvB,KAAKwB,WAAWD,GAC9CvB,KAAKwB,WAAW,IACrBxB,KAAKwC,SAAS,CACbd,WAAYH,gDAKboB,OAAOC,iBAAiB,UAAW5C,KAAKsC,iDAGhC,IAAAO,EAAA7C,KACR,OACCL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACdJ,EAAAC,EAAAC,cAACiD,EAAD,CAAS5C,QAASF,KAAKY,MAAMV,UAC7BP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbC,KAAKY,MAAMwB,OAAOW,IAAI,SAAAjB,GAAK,OAC3BnC,EAAAC,EAAAC,cAACmD,EAAD,CACCzB,IAAKO,EAAMP,IACXT,OAAQgB,EAAMP,IACdO,MAAOA,EAAMA,MACbJ,WAAYmB,EAAKjC,MAAMc,WACvBX,YAAa8B,EAAK9B,YAClBS,WAAYqB,EAAKrB,wBA3FNpB,cCKE6C,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,iBD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee53efd0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/Display.css\";\nclass Display extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"display\" className=\"display\">\n\t\t\t\t{this.props.display !== \"\" && this.props.display}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Display;\n","import React from \"react\";\n\nclass DrumPad extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\taudioKey: this.props.button\n\t\t};\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.playAudio = this.playAudio.bind(this);\n\t}\n\thandleClick(event) {\n\t\tconst button = event.currentTarget;\n\t\tthis.playAudio(button.children[0], button.id);\n\t}\n\tplayAudio(audio, key) {\n\t\tif (key) this.props.setDisplay(key);\n\t\taudio.play();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.keyPressed === this.state.audioKey) {\n\t\t\tthis.playAudio(this.refs.buttonRef.children[0]);\n\t\t}\n\t}\n\n\trender() {\n\t\t// const mp3_file = require(\"../audio/\" + this.props.button + \".mp3\");\n\t\tconst mp3_file = this.props.sound;\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName=\"drum-pad\"\n\t\t\t\tid={this.props.button}\n\t\t\t\tonClick={this.handleClick}\n\t\t\t\tref=\"buttonRef\"\n\t\t\t>\n\t\t\t\t{this.props.button}\n\t\t\t\t<audio src={mp3_file} className=\"clip\" id={this.props.button} />\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default DrumPad;\n","import React, { Component } from \"react\";\nimport Display from \"./Display\";\nimport DrumPad from \"./DrumPad\";\nimport \"../css/App.css\";\nimport \"../css/DrumPad.css\";\n\n//This is the outer Drum machine app containting all other components\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tkeys: [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"],\n\t\t\tsounds: [\n\t\t\t\t{\n\t\t\t\t\tkey: \"Q\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n\t\t\t\t\tdescription: \"Heater 1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"W\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n\t\t\t\t\tdescription: \"Heater 2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"E\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n\t\t\t\t\tdescription: \"Heater 3\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"A\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n\t\t\t\t\tdescription: \"Disc\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"S\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n\t\t\t\t\tdescription: \"Kick\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"D\",\n\t\t\t\t\tsound:\n\t\t\t\t\t\t\"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\n\t\t\t\t\tdescription: \"Punchy Kick\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"Z\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n\t\t\t\t\tdescription: \"Side Stick\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"X\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n\t\t\t\t\tdescription: \"Snare\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: \"C\",\n\t\t\t\t\tsound: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n\t\t\t\t\tdescription: \"Kick N Hat\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tkeyPressed: \"\",\n\t\t\tdisplay: \"\"\n\t\t};\n\t\tthis.setDisplay = this.setDisplay.bind(this);\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\n\t}\n\n\tsetDisplay(text) {\n\t\tthis.setState({\n\t\t\tdisplay: text\n\t\t});\n\t}\n\n\thandleKeyPress(event) {\n\t\tconst key = event.key.toUpperCase();\n\t\tif (this.state.keys.includes(key)) this.setDisplay(key);\n\t\telse this.setDisplay(\"\");\n\t\tthis.setState({\n\t\t\tkeyPressed: key\n\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keydown\", this.handleKeyPress);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"drum-machine\">\n\t\t\t\t<Display display={this.state.display} />\n\t\t\t\t<div className=\"drum-pads\">\n\t\t\t\t\t{this.state.sounds.map(sound => (\n\t\t\t\t\t\t<DrumPad\n\t\t\t\t\t\t\tkey={sound.key}\n\t\t\t\t\t\t\tbutton={sound.key}\n\t\t\t\t\t\t\tsound={sound.sound}\n\t\t\t\t\t\t\tkeyPressed={this.state.keyPressed}\n\t\t\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t\t\t\tsetDisplay={this.setDisplay}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"drum-machine\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}